// (command control shift 1)

// User-adjustable:

var zoom_to_fit = true;

var start_x = 16;
var start_y = 16;

var spacing_x = 256;
var spacing_y = 256;
var spacing_group = Math.round(spacing_x / 2);




// Main junk, don't tread on me

var curr_x = start_x;
var curr_y = start_y;

var max_right = 0;
var max_bottom = 0;

var prev_group_item = null;
var curr_row_height = 0;
var ran_once = false;

[[doc currentPage] deselectAllLayers];
var all_artboards = [[doc currentPage] artboards];

for (var i = [all_artboards count] - 1; i >= 0 ; i--) {
	var new_x, new_y;

	var ab = [all_artboards objectAtIndex:i];
	var artboard_name = [ab name];

	var m = artboard_name.match(/^#+/i);

	if ((m != null) && (ran_once == true)) {
		curr_x = start_x;
		curr_y = curr_row_height + spacing_y;
		curr_row_height = 0;
	}

	new_x = curr_x;
	new_y = curr_y;

	[[ab frame] setX:new_x];
	[[ab frame] setY:new_y];

	var artboard_right = [[ab absoluteRect] x] + [[ab absoluteRect] width];
	var artboard_bottom = [[ab absoluteRect] y] + [[ab absoluteRect] height];

	max_right = (artboard_right > max_right) ? artboard_right : max_right;
	max_bottom = (artboard_bottom > max_bottom) ? artboard_bottom : max_bottom;
	curr_row_height = (artboard_bottom > curr_row_height) ? artboard_bottom : curr_row_height;

	curr_x += [[ab absoluteRect] width] + spacing_x;

	ran_once = true;
}

if (zoom_to_fit == true) {
//	var all_rect = [{"x": start_x,"y": start_y},{"width": max_right,"height": max_bottom}];
//	doc.currentView().zoomToFitRect_(all_rect);
}